# HLint configuration file
# https://github.com/ndmitchell/hlint
#
# Oleg's preferences
##########################

# Specify additional command line arguments
- arguments: [--cpp-define=__GLASGOW_HASKELL__=804]

# Control which extensions/flags/modules/functions can be used
- extensions:
  - default: false # all extension are banned by default
  - name: 
    - BangPatterns
    - CPP
    - ConstraintKinds
    - DataKinds
    - DefaultSignatures
    - DeriveAnyClass
    - DeriveDataTypeable
    - DeriveFoldable
    - DeriveFunctor
    - DeriveGeneric
    - DeriveTraversable
    - EmptyCase
    - EmptyDataDecls
    - FlexibleContexts
    - FlexibleInstances
    - FunctionalDependencies
    - GADTs
    - GeneralizedNewtypeDeriving
    - KindSignatures
    - MultiParamTypeClasses
    - OverloadedStrings
    - PolyKinds
    - RankNTypes
    - RecordWildCards
    - Safe
    - ScopedTypeVariables
    - StandaloneDeriving
    - TemplateHaskellQuotes
    - Trustworthy
    - TypeFamilies
    - TypeOperators
    - UndecidableInstances
  # In general, I don't use Template Haskell
  - name: [TemplateHaskell, QuasiQuotes]
    within:
    - FileEmbedLzma
    - Data.Aeson.Extra.TH

  - name: [PatternSynonyms]
    within:
    - Data.DList.NonEmpty
    - Data.DList.NonEmpty.Internal
    - Data.Some.Newtype

  - name: [ViewPatterns]
    within:
    - Data.DList.NonEmpty.Internal

- flags:
  - {name: -Wno-orphans, within: []} # -w is allowed nowhere

- modules:
  # if you import Data.Set qualified, it must be as 'Set'
  - {name: Data.ByteString,         as: BS}
  - {name: Data.ByteString.Lazy,    as: LBS}
  - {name: Data.ByteString.Short,   as: SBS}
  - {name: Data.HashMap.Strict,     as: [HM, HashMap]}
  - {name: Data.HashSet,            as: [HS, HashSet]}
  - {name: Data.IntMap,             as: [IM, IntMap] }
  - {name: Data.IntSet,             as: [IS, IntSet] }
  - {name: Data.List,               as: [L, List]}
  - {name: Data.List.Compat,        as: [L, List]}
  - {name: Data.List.NonEmpty,      as: [NE]}
  - {name: Data.Map,                as: Map}
  - {name: Data.Map.Strict,         as: Map}
  - {name: Data.Set,                as: Set}
  - {name: Data.Text,               as: T}
  - {name: Data.Text.IO,            as: T}
  - {name: Data.Text.Encoding,      as: TE}
  - {name: Data.Text.Lazy,          as: LT}
  - {name: Data.Text.Lazy.IO,       as: LT}
  - {name: Data.Text.Lazy.Encoding, as: LTE}
  - {name: Data.Vector, as: [V, Vector]}

  # Certain modules are banned entirely

- functions:
  # unsafePerformIO can only appear in selected modules
  - name: unsafePerformIO
    within:
    - FileEmbedLzma
    - System.Random.SplitMix
    - System.Random.SplitMix32
  # same with unsafeCoerce
  - name: unsafeCoerce
    within:
    - Data.Time.Parsers # Pico -> Integer
    - Data.Some.Newtype # whole idea of that module is unsafe ;)

# Add custom hints for this project
#
# Will suggest replacing "wibbleMany [myvar]" with "wibbleOne myvar"
# - error: {lhs: "wibbleMany [x]", rhs: wibbleOne x}

# Turn on hints that are off by default
#
# Ban "module X(module X) where", to require a real export list
- warn: {name: Use explicit module export list}

# Ignore some builtin hints
- ignore: {name: "Use <$>"}
- ignore: {name: Avoid lambda using `infix`}
- ignore: {name: Avoid lambda}
- ignore: {name: Eta reduce}
- ignore: {name: Reduce duplication}
- ignore: {name: Redundant do}
- ignore: {name: Redundant lambda}
- ignore: {name: Use const}
- ignore: {name: Use curry}
- ignore: {name: Use fewer imports}
- ignore: {name: Use lambda-case}
- ignore: {name: Use section}
- ignore: {name: Use String}
- ignore: {name: Use tuple-section}
- ignore: {name: Use uncurry}
- ignore: {name: Use list comprehension}

# https://github.com/ndmitchell/hlint/issues/768
- ignore: {name: Unused LANGUAGE pragma} # TODO

# Specific things
- ignore: {name: Use zip, within: [Data.Semialign.Internal]} # default definitions in the class
- ignore: {name: Use newtype instead of data, within: [Data.Tuple.OneTuple]} # Purpose of the module to have **data**
- ignore: {name: Use fmap, within: [Data.Binary.Orphans]} # TODO
- ignore: {name: Use sortOn, within: [Data.HashMap.Strict.InsOrd]} # here sortBy (comparing ..) is faster.
- ignore: {name: Use camelCase, within: [Graphics.Rendering.Chart.Plot.TDigest]}

# Define some custom infix operators
- fixity: infixl 3 <!>
